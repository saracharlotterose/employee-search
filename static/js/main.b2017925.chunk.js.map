{"version":3,"sources":["Search.js","util/API.js","Employee.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","margin","spacing","width","axios","create","baseURL","responseType","EmployeeSearch","props","handleChange","e","searchValue","target","value","filtered","state","employeeData","filter","employee","name","includes","setState","employees","error","isLoaded","API","get","result","this","data","classes","maxWidth","color","title","fontSize","pos","marginBottom","message","noValidate","autoComplete","TextField","id","label","placeholder","multiline","variant","onChange","map","key","Card","style","CardContent","Typography","gutterBottom","component","department","CardActions","Button","size","React","Component","App","className","Employee","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"yOAIkBA,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,a,kHCNEC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,oEACTC,aAAc,SC2GHC,E,kDAjGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoBRC,aAAe,SAACC,GACd,IAAIC,EAAcD,EAAEE,OAAOC,MAEvBC,EADqB,EAAKC,MAAtBC,aACoBC,QAAO,SAACC,GAAD,OAAcA,EAASC,KAAKC,SAAST,MACxE,EAAKU,SAAS,CACZC,UAAWR,KAxBb,EAAKC,MAAQ,CACXQ,MAAO,KACPC,UAAU,EACVF,UAAW,IALI,E,gMAWEG,EAAIC,IAAI,a,OAAvBC,E,OAEJC,KAAKP,SAAS,CACZG,UAAU,EACVR,aAAcW,EAAOE,KACrBP,UAAWK,EAAOE,O,qIAepB,IAAMC,EAAU,CACd/B,KAAM,CACJgC,SAAU,IACVC,MAAO,MACPhC,OAAQ,QAEViC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,KAXX,EAegCR,KAAKb,MAApCQ,EAfD,EAeCA,MAAOC,EAfR,EAeQA,SAAUF,EAflB,EAekBA,UAEzB,OAAIC,EACK,uCAAaA,EAAMc,SAChBb,EAIV,6BACI,0BAAMc,YAAU,EAACC,aAAa,OAC9B,6BACE,kBAACC,EAAA,EAAD,CACEC,GAAG,oBACHC,MAAM,iBACNC,YAAY,OACZC,WAAS,EACTC,QAAQ,WACRC,SAAUlB,KAAKnB,iBAIpBa,EAAUyB,KAAI,SAAA7B,GAAQ,OACnB,yBAAK8B,IAAK9B,EAASC,MACjB,kBAAC8B,EAAA,EAAD,CAAMC,MAAOpB,EAAQ/B,MACrB,kBAACoD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,MAAOpB,EAAQG,MAAOD,MAAM,gBAAgBqB,cAAY,GAApE,YAGA,kBAACD,EAAA,EAAD,CAAYP,QAAQ,KAAKS,UAAU,MAChCpC,EAASC,MAEZ,kBAACiC,EAAA,EAAD,CAAYF,MAAOpB,EAAQK,IAAKH,MAAM,iBACnCd,EAASqC,YAEZ,kBAACH,EAAA,EAAD,CAAYP,QAAQ,QAAQS,UAAU,KAAtC,2BAEE,6BACC,yBAGL,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAAb,qBApCH,+C,GApDgBC,IAAMC,WCIpBC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAElB,kBAACC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL0D,QAAQ1D,MAAMA,EAAMc,c","file":"static/js/main.b2017925.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nexport default function TextFields() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState('Controlled');\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      \n      <div>\n\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Enter Employee\"\n          placeholder=\"Name\"\n          multiline\n          variant=\"outlined\"\n        />\n        \n      </div>\n    </form>\n  );\n}","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"https://my-json-server.typicode.com/saracharlotterose/employyedb/\",\n    responseType: \"json\"\n});","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport API from './util/API.js';\nimport TextField from '@material-ui/core/TextField';\n\n\n\nclass EmployeeSearch extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      employees: [],\n    };\n  }\n\n  async componentDidMount() {\n    // AJAX Call\n    let result = await API.get(\"employees\")\n\n    this.setState({\n      isLoaded: true,\n      employeeData: result.data,\n      employees: result.data\n    });\n\n  }\n\n  handleChange = (e) => {\n    let searchValue = e.target.value;\n    const { employeeData } = this.state;\n    let filtered = employeeData.filter((employee) => employee.name.includes(searchValue));\n    this.setState({\n      employees: filtered\n    });\n  }\n\n  render() {\n    const classes = {\n      root: {\n        maxWidth: 275,\n        color: \"red\",\n        margin: \"10px\"\n      },\n      title: {\n        fontSize: 18,\n      },\n      pos: {\n        marginBottom: 12,\n      },\n    };\n\n    const { error, isLoaded, employees } = this.state;\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n    return(\n      <div>\n          <form noValidate autoComplete=\"off\">  \n          <div>\n            <TextField  \n              id=\"outlined-textarea\"\n              label=\"Enter Employee\"\n              placeholder=\"Name\"\n              multiline\n              variant=\"outlined\"\n              onChange={this.handleChange}\n            />      \n          </div>\n        </form>\n        {employees.map(employee => (\n            <div key={employee.name}>\n              <Card style={classes.root}>\n              <CardContent>\n                <Typography style={classes.title} color=\"textSecondary\" gutterBottom>\n                  Employee\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {employee.name}\n                </Typography>\n                <Typography style={classes.pos} color=\"textSecondary\">\n                  {employee.department}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  well meaning and kindly.\n                  <br />\n                  {'\"a benevolent smile\"'}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\">Learn More</Button>\n              </CardActions>\n            </Card>\n            </div>\n          ))}\n      </div>\n\n      );\n    }\n  }\n}\nexport default EmployeeSearch\n","import React from 'react';\nimport Textfields from './Search.js';\nimport EmployeeSearch from './Employee.js';\n\nimport { colors } from '@material-ui/core';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <EmployeeSearch/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}